# Cold Starts
## What's that?
In Android, there is three types of starts: First Starts, Cold Starts and Warm Starts.

- First starts, the slowest, is just after it have been installed or updated. The app needs to set up database, load configuration, load the first batch of data. It's only occurring once so we will not talk about it.

- Warm starts, the fastest, is when you put your app in background and went back to it. The app is still launched; all services are already up running. It's usually very fast.

- Cold starts, in between first and warm, is frequently occurring and the user will notice the slow start time *(I wasn't able to retrieve data, even if I remember seeing one)*. When the application is not loaded by the system, it has to relaunch all his objects, services, assets and that can be slow.

## Why it's so slow
In everyday work, we try to use the [best tools](https://github.com/codepath/android_guides/wiki/Must-Have-Libraries) to fasten the development and achieve the business requirements. Unfortunately, they are often lined up over features and don't take into account the benefits of a snappy application.

To fasten development, we use a lot of libraries that are needed across the whole application. To do so, they are often instantiated in the ```Application.onCreate()```. The problem comes when we start using too much without any threading. The onCreate is one of the first methods to be called when the application launches and if have any blocking code, we will impact directly the launch time.

## SplashScreen mistake
Lot of blog posts have been written about this -> cyrilMottier post
*** sumarize ***

As of many Android developers, I'm a partisan of the ***Show the content fast*** rule. And for me, It's like modifying this well-known quote from Uncle Bob's Clean Code book
> "Every time you write a ~~comment~~ *SplashScreen*, you should grimace and feel the failure of your ability of ~~expression~~ *coding a snappy app*."

Today, instead of focusing on creating a nice startup with the windowBackground we will focus on tracking what is taking time at startup and reduce that time.

# Real world study
## What kind of App
We will study an application built in the company I work for: [YP Dine](https://play.google.com/store/apps/details?id=com.ypg.dine).
*** logo yp dine ***

## With what
Usually I use *TraceView and DmTraceDump*, but I keep it for a dedicated post. This time we will rely on a new player here : [NimbleDroid](https://nimbledroid.com/). What I like is that the performance tests are in the same conditions for each applications. It means that you can compare your application with other ones like Facebook, WhatsApp and other big players.











It's slow because we



It's rarely what I usually see on applications I jump onto.

> "Hey Guys, I have no time to fix this Anyway, it's not so slow. [10 libraries later]... Mmmm I guess we have a problem."


*** Library + no threads = errors ***

On one hand,
Applications use a lot of libraries. If you are very picky you can deal with less than ten. If you have a lot of business requirements, it's where hell starts. On the

A big part of them
- Applications needs a lot of libraries
- Most of libraries needs creation at Startup (list some)
- Most of those are create in the App's onCreate
- initializations in the onCreate takes memory and time.
- Slow ([cold start](fill url)),
- User not able to use it fast
- User loose interest in launching it



#TraceView and DmTraceDump
We can find some information about those tools in the [Android documentation](http://developer.android.com/tools/debugging/debugging-tracing.html). Their purpose is to find the bottlenecks in your code and help you fix it. We will not use them directly and use NimbleDroid

ypg.dine

***[ScreenShot dine Nimbledroid's onCreate]***
in the onCreate, we can see 3 methods taking most of the time
UserPreferences
JodaTime
other one

Checking in the code
***Screenshot of onCreate***
Separation and cleanup of onCreate



- Singleton pattern is not the solution, welcome single instance
-> [nice explanation](http://programmers.stackexchange.com/a/40610/212413)




**What's Lazy Loading**

From Wikipedia, Lazy


[New York Times, Improving Startup Time](http://open.blogs.nytimes.com/2016/02/11/improving-startup-time-in-the-nytimes-android-app/?_r=0)
